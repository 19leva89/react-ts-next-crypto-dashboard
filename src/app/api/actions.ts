'use server'

import { compare } from 'bcryptjs'
import { revalidatePath } from 'next/cache'

import { prisma } from '@/lib/prisma'
import { Prisma } from '@prisma/client'

import {
	AIRDROPS_DATA_KEY,
	CATEGORIES_KEY,
	COIN_DATA_KEY,
	COINS_LIST_KEY,
	MARKET_CHART_KEY,
	TRENDING_KEY,
} from './constants'
import { auth, signIn } from '@/auth'
import { makeReq } from './make-request'
import { sendEmail } from '@/lib/send-email'
import { saltAndHashPassword } from '@/lib/salt'
import { VerificationUserTemplate } from '@/components/shared/email-temapltes'
import { AidropsData, CategoriesData, CoinListData, CoinData, MarketChartData, TrendingData } from './types'

export const registerUser = async (body: Prisma.UserCreateInput) => {
	try {
		const user = await prisma.user.findFirst({
			where: {
				email: body.email,
			},
		})

		if (user) {
			if (!user.emailVerified) {
				throw new Error('Email not confirmed')
			}

			throw new Error('User already exists')
		}

		const createdUser = await prisma.user.create({
			data: {
				name: body.name,
				email: body.email,
				password: await saltAndHashPassword(body.password as string),
			},
		})

		const code = Math.floor(100000 + Math.random() * 900000).toString()

		await prisma.verificationCode.create({
			data: {
				code,
				userId: createdUser.id,
			},
		})

		await sendEmail(
			createdUser.email,
			'Crypto / üìù Registration confirmation',
			VerificationUserTemplate({
				code,
			}),
		)
	} catch (error) {
		console.log('Error [CREATE_USER]', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const loginUser = async (provider: string) => {
	await signIn(provider, { redirectTo: '/' })

	revalidatePath('/')
}

export const loginUserWithCreds = async (body: Prisma.UserCreateInput) => {
	const user = await prisma.user.findUnique({
		where: { email: body.email },
		include: { accounts: true },
	})

	if (!user) {
		throw new Error('Invalid password or email')
	}

	if (user.accounts.length > 0) {
		throw new Error('This email is linked to a social login. Please use GitHub or Google')
	}

	const isPasswordValid = await compare(body.password as string, user.password ?? '')

	if (!isPasswordValid) {
		throw new Error('Invalid password or email')
	}

	if (!user.emailVerified) {
		throw new Error('Email is not verified')
	}

	const data = {
		email: body.email,
		password: body.password,
		redirect: false,
	}

	const result = await signIn('credentials', data)

	if (result?.error) {
		throw new Error(result.error)
	}

	revalidatePath('/')
}

export const updateUserInfo = async (body: Prisma.UserUpdateInput) => {
	try {
		const session = await auth()

		if (!session?.user) {
			throw new Error('User not found')
		}

		const existingUser = await prisma.user.findFirst({
			where: { id: session?.user.id },
			include: { accounts: true },
		})

		if (!existingUser) {
			throw new Error('User not found')
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è OAuth-–∞–∫–∫–∞—É–Ω—Ç—ã
		const hasOAuthAccounts = existingUser.accounts.length > 0

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª —á–µ—Ä–µ–∑ OAuth, –∑–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ email –∏ –ø–∞—Ä–æ–ª—è
		if (hasOAuthAccounts) {
			if (body.email && body.email !== existingUser.email) {
				throw new Error('Email cannot be changed for OAuth users')
			}

			if (body.password) {
				throw new Error('Password cannot be changed for OAuth users')
			}
		}

		// Validation for email uniqueness
		if (body.email && body.email !== existingUser.email && !hasOAuthAccounts) {
			const emailExists = await prisma.user.findUnique({
				where: {
					email: body.email as string,
				},
			})
			if (emailExists) {
				throw new Error('Email is already in use')
			}
		}

		const updatedData: Prisma.UserUpdateInput = {
			name: body.name,
		}

		// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ OAuth, —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ email –∏ –ø–∞—Ä–æ–ª—è
		if (!hasOAuthAccounts) {
			updatedData.email = body.email ? body.email : existingUser.email
			updatedData.password = body.password
				? await saltAndHashPassword(body.password as string)
				: existingUser.password
		}

		const updatedUser = await prisma.user.update({
			where: {
				id: session?.user.id,
			},
			data: updatedData,
		})

		return updatedUser
	} catch (error) {
		console.log('Error [UPDATE_USER]', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const deleteUser = async (userId?: string) => {
	try {
		const session = await auth()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if (!session?.user) {
			throw new Error('User not authenticated')
		}

		// –ï—Å–ª–∏ userId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const targetUserId = userId || session.user.id

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Å–µ–±—è (–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö)
		if (session.user.role !== 'ADMIN' && targetUserId !== session.user.id) {
			throw new Error('You do not have permission to delete this user')
		}

		// –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)
		const deletedUser = await prisma.user.delete({
			where: {
				id: targetUserId,
			},
			include: {
				accounts: true, // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
				sessions: true, // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
				verificationCode: true, // –£–¥–∞–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
			},
		})

		return deletedUser
	} catch (error) {
		console.error('Error [DELETE_USER]', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const addCryptoToUser = async (coinId: string, quantity: number) => {
	try {
		const session = await auth()

		if (!session?.user) {
			throw new Error('User not authenticated')
		}

		if (!coinId) {
			throw new Error('CoinId is required')
		}

		if (typeof quantity !== 'number' || isNaN(quantity) || quantity <= 0) {
			throw new Error('Quantity must be a valid number greater than 0')
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		const user = await prisma.user.findUnique({
			where: { id: session.user.id },
		})

		if (!user) {
			throw new Error('User not found')
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–µ –∏–∑ fetchCoinData
		const coinData = await fetchCoinData(coinId)

		// –ï—Å–ª–∏ coinData –ø—É—Å—Ç–æ–µ (–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö), –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
		if (!coinData || Object.keys(coinData).length === 0) {
			throw new Error(`Failed to fetch data for coin ${coinId}`)
		}

		// –ò—â–µ–º –º–æ–Ω–µ—Ç—É –ø–æ —Å–æ—Å—Ç–∞–≤–Ω–æ–º—É –∫–ª—é—á—É (–∫–ª—é—á+coinId)
		let coin = await prisma.coin.findUnique({
			where: {
				key_coinId: {
					key: COIN_DATA_KEY,
					coinId: coinId,
				},
			},
		})

		// –ï—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ–µ
		if (!coin) {
			coin = await prisma.coin.create({
				data: {
					key: COIN_DATA_KEY,
					coinId: coinId,
					value: JSON.stringify(coinData),
					createdAt: new Date(),
					updatedAt: new Date(),
				},
			})
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º–æ–Ω–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const userCoin = await prisma.userCoin.findUnique({
			where: {
				userId_coinId: {
					userId: user.id,
					coinId: coin.id,
				},
			},
		})

		if (userCoin) {
			throw new Error('The coin is already in the portfolio')
		}

		// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å UserCoin
		await prisma.userCoin.create({
			data: {
				userId: user.id,
				coinId: coin.id,
				quantity,
			},
		})

		revalidatePath('/')
	} catch (error) {
		console.error('Error [ADD_CRYPTO_TO_USER]:', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const getUserCryptos = async () => {
	try {
		const session = await auth()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if (!session?.user) {
			throw new Error('User not authenticated')
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if (session.user.id !== session.user.id && session.user.role !== 'ADMIN') {
			throw new Error('You do not have permission to perform this action')
		}

		return await prisma.userCoin.findMany({
			where: {
				userId: session.user.id,
			},
			include: {
				coin: true, // –í–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
			},
		})
	} catch (error) {
		console.error('Error [GET_USER_CRYPTO]', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const updateCryptoQuantity = async (coinId: string, quantity: number) => {
	try {
		const session = await auth()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if (!session?.user) {
			throw new Error('User not authenticated')
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if (session.user.id !== session.user.id && session.user.role !== 'ADMIN') {
			throw new Error('You do not have permission to perform this action')
		}

		// –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		if (quantity <= 0) {
			throw new Error('Quantity must be greater than 0')
		}

		await prisma.userCoin.update({
			where: {
				userId_coinId: { userId: session.user.id, coinId }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
			},
			data: {
				quantity,
			},
		})

		revalidatePath('/')
	} catch (error) {
		console.error('Error [UPDATE_USER_CRYPTO]', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const delleteCryptoFromUser = async (coinId: string) => {
	try {
		const session = await auth()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		if (!session?.user) {
			throw new Error('User not authenticated')
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
		if (session.user.id !== session.user.id && session.user.role !== 'ADMIN') {
			throw new Error('You do not have permission to perform this action')
		}

		await prisma.userCoin.delete({
			where: {
				userId_coinId: { userId: session.user.id, coinId }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
			},
		})

		revalidatePath('/')
	} catch (error) {
		console.error('Error [DELETE_USER_CRYPTO]', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const fetchTrendingData = async (): Promise<TrendingData> => {
	try {
		const cachedData = await prisma.trendingData.findUnique({
			where: { key: TRENDING_KEY },
		})

		if (cachedData) {
			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
			return cachedData.value as TrendingData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ API
		const data = await makeReq('GET', '/gecko/trending')
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
			await prisma.trendingData.create({
				data: {
					key: TRENDING_KEY,
					value: data,
				},
			})

			return data
		} else {
			return { coins: [] }
		}
	} catch (error) {
		console.error('Error fetching trending data:', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const fetchCategories = async (): Promise<CategoriesData> => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const categories = await prisma.category.findUnique({
			where: { key: CATEGORIES_KEY },
		})

		if (categories) {
			return JSON.parse(categories.value) as CategoriesData
		}

		// –ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
		const data = await makeReq('GET', '/gecko/categories')
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			await prisma.category.upsert({
				where: { key: CATEGORIES_KEY },
				update: { value: JSON.stringify(data) },
				create: { key: CATEGORIES_KEY, value: JSON.stringify(data) },
			})

			return data
		}

		return []
	} catch (error) {
		console.error('Error fetching categories:', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const fetchCoinsList = async (): Promise<CoinListData> => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const coinsList = await prisma.coin.findUnique({
			where: {
				key_coinId: {
					key: COINS_LIST_KEY,
					coinId: 'coins_list',
				},
			},
		})

		if (coinsList) {
			return JSON.parse(coinsList.value as string) as CoinListData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
		const data = await makeReq('GET', '/gecko/list')
		if (data && typeof data === 'object' && data !== null) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
			await prisma.coin.upsert({
				where: {
					key_coinId: {
						key: COINS_LIST_KEY,
						coinId: 'coins_list',
					},
				},
				update: { value: JSON.stringify(data) },
				create: {
					key: COINS_LIST_KEY,
					value: JSON.stringify(data),
					coinId: 'coins_list',
				},
			})

			return data
		} else {
			console.error('Invalid data received for coins list:', data)
			return []
		}
	} catch (error) {
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
		if (error instanceof Error) {
			console.error('Error fetching coins list:', error.message)
		} else {
			console.error('Unknown error occurred during fetching coins list')
		}

		throw error
	}
}

export const fetchCoinData = async (coinId: string): Promise<CoinData> => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á—É –∏ coinId
		const coinsDataRecord = await prisma.coin.findUnique({
			where: {
				key_coinId: {
					key: COIN_DATA_KEY,
					coinId: coinId,
				},
			},
		})

		let coinsDatas: Record<string, CoinData> = {}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		if (coinsDataRecord) {
			try {
				coinsDatas = JSON.parse(coinsDataRecord.value as string)
			} catch (error) {
				console.error('Error parsing coins data:', error)
				coinsDatas = {} // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
			}

			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
			if (coinsDatas[coinId]) {
				return coinsDatas[coinId]
			}
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await makeReq('GET', `/gecko/coins/${coinId}`)
		if (!data || Object.keys(data).length === 0) {
			console.error(`Failed to fetch valid data for coin ${coinId}`)
			return {} as CoinData
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
		coinsDatas[coinId] = data

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		await prisma.coin.upsert({
			where: {
				key_coinId: {
					key: COIN_DATA_KEY,
					coinId: coinId,
				},
			},
			update: { value: JSON.stringify(coinsDatas) },
			create: {
				key: COIN_DATA_KEY,
				value: JSON.stringify(coinsDatas),
				coinId: coinId, // –ü–µ—Ä–µ–¥–∞–µ–º coinId
			},
		})

		return data
	} catch (error) {
		console.error(`Error fetching data for coin ${coinId}:`, error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const fetchCoinsListByCate = async (cate: string): Promise<CoinListData> => {
	try {
		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		const coinId = `${cate}-category`

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const categoryData = await prisma.coin.findUnique({
			where: {
				key_coinId: {
					key: cate,
					coinId: coinId,
				},
			},
		})

		if (categoryData) {
			return JSON.parse(categoryData.value as string) as CoinListData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
		const data = await makeReq('GET', `/gecko/${cate}/coins`)
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
			await prisma.coin.upsert({
				where: {
					key_coinId: {
						key: cate,
						coinId: coinId,
					},
				},
				update: { value: JSON.stringify(data) },
				create: { key: cate, value: JSON.stringify(data), coinId: coinId },
			})

			return data
		}

		return []
	} catch (error) {
		console.error(`Error fetching coins list for category ${cate}:`, error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const fetchCoinsMarketChart = async (coinId: string): Promise<MarketChartData> => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		const marketChartData = await prisma.marketChart.findUnique({
			where: { key: MARKET_CHART_KEY },
		})

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
		if (marketChartData) {
			const marketChartDatas = JSON.parse(marketChartData.value as string) as Record<string, MarketChartData>
			const coinMarketChart = marketChartDatas[coinId]
			if (coinMarketChart) {
				return coinMarketChart
			}
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await makeReq('GET', `/gecko/chart/${coinId}`)
		if (data) {
			let marketChartDatas: Record<string, MarketChartData> = {}

			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
			if (marketChartData) {
				marketChartDatas = JSON.parse(marketChartData.value as string)
			}

			marketChartDatas[coinId] = data

			// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
			const marketChartId = `${coinId}-chart`

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			await prisma.marketChart.upsert({
				where: { key: MARKET_CHART_KEY },
				update: { value: JSON.stringify(marketChartDatas) },
				create: { key: MARKET_CHART_KEY, value: JSON.stringify(marketChartDatas), coinId: marketChartId },
			})

			return data
		}

		return {} as MarketChartData
	} catch (error) {
		console.error(`Error fetching market chart for coin ${coinId}:`, error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}

export const fetchAidrops = async (): Promise<AidropsData> => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ airdrops –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		const aidropsDataRecord = await prisma.aidrop.findUnique({
			where: { key: AIRDROPS_DATA_KEY }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏
		})

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ airdrops —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
		if (aidropsDataRecord) {
			return JSON.parse(aidropsDataRecord.value as string) as AidropsData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await makeReq('GET', '/cmc/aidrops')
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ airdrops –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			await prisma.aidrop.upsert({
				where: { key: AIRDROPS_DATA_KEY }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
				update: { value: JSON.stringify(data) }, // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
				create: { key: AIRDROPS_DATA_KEY, value: JSON.stringify(data) }, // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
			})

			return data
		}

		return {} as AidropsData
	} catch (error) {
		console.error('Error fetching aidrops data:', error)

		if (error instanceof Prisma.PrismaClientKnownRequestError) {
			console.error('Prisma error code:', error.code)
			console.error('Prisma error message:', error.message)
		}

		throw error
	}
}
