'use server'

import { hashSync } from 'bcrypt'

import { prisma } from '@/lib/prisma'
import { Prisma } from '@prisma/client'

import {
	AidropsData,
	CategoriesData,
	CoinListData,
	CoinsData,
	MarketChartData,
	TrendingData,
} from './definitions'
import {
	AIRDROPS_DATA_KEY,
	CATEGORIES_KEY,
	COINS_DATA_KEY,
	COINS_LIST_KEY,
	MARKET_CHART_KEY,
	TRENDING_KEY,
} from './constants'
import { makeReq } from './make-request'
import { sendEmail } from '@/lib/send-email'
import { getUserSession } from '@/lib/get-user-session'
import { VerificationUserTemplate } from '@/components/shared/email-temapltes'

export const updateUserInfo = async (body: Prisma.UserUpdateInput) => {
	try {
		const currentUser = await getUserSession()

		if (!currentUser) {
			throw new Error('User not found')
		}

		const existingUser = await prisma.user.findFirst({
			where: {
				id: currentUser.id,
			},
		})

		if (!existingUser) {
			throw new Error('User not found')
		}

		// Validation for email uniqueness
		if (body.email && body.email !== existingUser.email) {
			const emailExists = await prisma.user.findUnique({
				where: {
					email: body.email as string,
				},
			})
			if (emailExists) {
				throw new Error('Email is already in use')
			}
		}

		const updatedData: Prisma.UserUpdateInput = {
			name: body.name,
			email: body.email ? body.email : existingUser.email, // Conditional assignment
			password: body.password ? hashSync(body.password as string, 10) : existingUser.password,
		}

		const updatedUser = await prisma.user.update({
			where: {
				id: currentUser.id,
			},
			data: updatedData,
		})

		return updatedUser
	} catch (err) {
		console.log('Error [UPDATE_USER]', err)
		throw err
	}
}

export const registerUser = async (body: Prisma.UserCreateInput) => {
	try {
		const user = await prisma.user.findFirst({
			where: {
				email: body.email,
			},
		})

		if (user) {
			if (!user.emailVerified) {
				throw new Error('Email not confirmed')
			}

			throw new Error('User already exists')
		}

		const createdUser = await prisma.user.create({
			data: {
				name: body.name,
				email: body.email,
				password: hashSync(body.password, 10),
			},
		})

		const code = Math.floor(100000 + Math.random() * 900000).toString()

		await prisma.verificationCode.create({
			data: {
				code,
				userId: createdUser.id,
			},
		})

		await sendEmail(
			createdUser.email,
			'Crypto / üìù Registration confirmation',
			VerificationUserTemplate({
				code,
			}),
		)
	} catch (err) {
		console.log('Error [CREATE_USER]', err)
		throw err
	}
}

export const fetchTrendingData = async (): Promise<TrendingData | null> => {
	try {
		const cachedData = await prisma.trendingData.findUnique({
			where: { key: TRENDING_KEY },
		})

		if (cachedData) {
			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
			return cachedData.value as TrendingData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö —á–µ—Ä–µ–∑ API
		const data = await makeReq('GET', '/gecko/trending')
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
			await prisma.trendingData.create({
				data: {
					key: TRENDING_KEY,
					value: data,
				},
			})

			return data
		} else {
			return null
		}
	} catch (error) {
		console.error('Error fetching trending data:', error)
		return null
	}
}

export const fetchCategories = async (): Promise<CategoriesData | null> => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const categories = await prisma.category.findUnique({
			where: { key: CATEGORIES_KEY },
		})

		if (categories) {
			return JSON.parse(categories.value) as CategoriesData
		}

		// –ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
		const data = await makeReq('GET', '/gecko/categories')
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			await prisma.category.upsert({
				where: { key: CATEGORIES_KEY },
				update: { value: JSON.stringify(data) },
				create: { key: CATEGORIES_KEY, value: JSON.stringify(data) },
			})

			return data
		}

		return null
	} catch (error) {
		console.error('Error fetching categories:', error)
		return null
	}
}

export const fetchCoinsList = async (): Promise<CoinListData | null> => {
	try {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const coinsList = await prisma.coin.findUnique({
			where: {
				key_coinId: {
					key: COINS_LIST_KEY,
					coinId: 'coins_list',
				},
			},
		})

		if (coinsList) {
			return JSON.parse(coinsList.value as string) as CoinListData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
		const data = await makeReq('GET', '/gecko/list')
		if (data && typeof data === 'object' && data !== null) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
			await prisma.coin.upsert({
				where: {
					key_coinId: {
						key: COINS_LIST_KEY,
						coinId: 'coins_list',
					},
				},
				update: { value: JSON.stringify(data) },
				create: {
					key: COINS_LIST_KEY,
					value: JSON.stringify(data),
					coinId: 'coins_list',
				},
			})

			return data
		} else {
			console.error('Invalid data received for coins list:', data)
			return null
		}
	} catch (error) {
		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
		if (error instanceof Error) {
			console.error('Error fetching coins list:', error.message)
		} else {
			console.error('Unknown error occurred during fetching coins list')
		}
		return null
	}
}

export const fetchCoinsData = async (coinId: string): Promise<CoinsData | null> => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª—é—á—É –∏ coinId
		const coinsDataRecord = await prisma.coin.findUnique({
			where: {
				key_coinId: {
					key: COINS_DATA_KEY,
					coinId: coinId,
				},
			},
		})

		let coinsDatas: Record<string, CoinsData> = {}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		if (coinsDataRecord) {
			try {
				coinsDatas = JSON.parse(coinsDataRecord.value as string)
			} catch (error) {
				console.error('Error parsing coins data:', error)
				coinsDatas = {} // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
			}

			const coinData = coinsDatas[coinId]
			if (coinData) {
				return coinData
			}
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await makeReq('GET', `/gecko/coins/${coinId}`)
		if (!data) {
			console.error(`No data received for coin ${coinId}`)
			return null
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
		coinsDatas[coinId] = data

		// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ coinsDatas –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ null
		if (Object.keys(coinsDatas).length === 0) {
			console.error('No valid coin data available to save')
			return null
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–æ–Ω–µ—Ç–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		await prisma.coin.upsert({
			where: {
				key_coinId: {
					key: COINS_DATA_KEY,
					coinId: coinId,
				},
			},
			update: { value: JSON.stringify(coinsDatas) },
			create: {
				key: COINS_DATA_KEY,
				value: JSON.stringify(coinsDatas),
				coinId: coinId, // –ü–µ—Ä–µ–¥–∞–µ–º coinId
			},
		})

		return data
	} catch (error) {
		console.error(`Error fetching data for coin ${coinId}:`, error)
		return null
	}
}

export const fetchCoinsListByCate = async (cate: string): Promise<CoinListData | null> => {
	try {
		// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		const coinId = `${cate}-category`

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		const categoryData = await prisma.coin.findUnique({
			where: {
				key_coinId: {
					key: cate,
					coinId: coinId,
				},
			},
		})

		if (categoryData) {
			return JSON.parse(categoryData.value as string) as CoinListData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
		const data = await makeReq('GET', `/gecko/${cate}/coins`)
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
			await prisma.coin.upsert({
				where: {
					key_coinId: {
						key: cate,
						coinId: coinId,
					},
				},
				update: { value: JSON.stringify(data) },
				create: { key: cate, value: JSON.stringify(data), coinId: coinId },
			})

			return data
		}

		return null
	} catch (error) {
		console.error(`Error fetching coins list for category ${cate}:`, error)
		return null
	}
}

export const fetchCoinsMarketChart = async (coinId: string): Promise<MarketChartData | null> => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		const marketChartData = await prisma.marketChart.findUnique({
			where: { key: MARKET_CHART_KEY },
		})

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
		if (marketChartData) {
			const marketChartDatas = JSON.parse(marketChartData.value as string) as Record<string, MarketChartData>
			const coinMarketChart = marketChartDatas[coinId]
			if (coinMarketChart) {
				return coinMarketChart
			}
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await makeReq('GET', `/gecko/chart/${coinId}`)
		if (data) {
			let marketChartDatas: Record<string, MarketChartData> = {}

			// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
			if (marketChartData) {
				marketChartDatas = JSON.parse(marketChartData.value as string)
			}

			marketChartDatas[coinId] = data

			// –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏
			const marketChartId = `${coinId}-chart`

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			await prisma.marketChart.upsert({
				where: { key: MARKET_CHART_KEY },
				update: { value: JSON.stringify(marketChartDatas) },
				create: { key: MARKET_CHART_KEY, value: JSON.stringify(marketChartDatas), coinId: marketChartId },
			})

			return data
		}

		return null
	} catch (error) {
		console.error(`Error fetching market chart for coin ${coinId}:`, error)
		return null
	}
}

export const fetchAidrops = async (): Promise<AidropsData | null> => {
	try {
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ airdrops –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		const aidropsDataRecord = await prisma.aidrop.findUnique({
			where: { key: AIRDROPS_DATA_KEY }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∏
		})

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ airdrops —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
		if (aidropsDataRecord) {
			return JSON.parse(aidropsDataRecord.value as string) as AidropsData
		}

		// –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
		const data = await makeReq('GET', '/cmc/aidrops')
		if (data) {
			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ airdrops –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			await prisma.aidrop.upsert({
				where: { key: AIRDROPS_DATA_KEY }, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏
				update: { value: JSON.stringify(data) }, // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
				create: { key: AIRDROPS_DATA_KEY, value: JSON.stringify(data) }, // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
			})

			return data
		}

		return null
	} catch (error) {
		console.error('Error fetching aidrops data:', error)
		return null
	}
}
