generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id               String            @id @default(cuid())
  name             String?
  email            String            @unique
  password         String
  image            String?
  //
  role             UserRole          @default(USER)
  emailVerified    DateTime?
  verificationCode VerificationCode?
  //
  accounts         Account[]
  sessions         Session[]
  Authenticator    Authenticator[]
  //
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  //
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  //
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  //
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model VerificationCode {
  id        String   @id @default(cuid())
  //
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  //
  code      String
  //
  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model TrendingData {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coin {
  id        String   @id @default(cuid())
  key       String
  coinId    String?
  value     Json
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, coinId], name: "key_coinId")
}

model MarketChart {
  id        String   @id @default(cuid())
  key       String   @unique
  coinId    String
  value     Json
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Aidrop {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  //
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
