generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum AirdropStatus {
  UPCOMING
  ONGOING
  ENDED
}

model User {
  id               String            @id @default(cuid()) @map("_id")
  name             String?
  email            String            @unique
  password         String?
  image            String?
  //
  role             UserRole          @default(USER)
  emailVerified    DateTime?
  verificationCode VerificationCode?
  //
  accounts         Account[]
  sessions         Session[]
  authenticator    Authenticator[]
  userCoins        UserCoin[]
  //
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Account {
  id                String   @id @default(cuid()) @map("_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  //
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  //
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  expires      DateTime
  //
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  //
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  //
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model VerificationCode {
  id        String   @id @default(cuid()) @map("_id")
  //
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  //
  code      String
  //
  createdAt DateTime @default(now())

  @@map("verification_code")
}

model CoinsListIDMap {
  id        String     @id @unique
  symbol    String
  name      String
  coin      Coin?
  //
  userCoins UserCoin[]
  airdrops  Airdrop[]

  @@map("coins_list_id_map")
}

model Coin {
  id                                     String         @id @unique
  current_price                          Float?
  description                            String?
  image                                  String?
  market_cap                             Float?
  market_cap_rank                        Int?
  total_volume                           Float?
  high_24h                               Float?
  low_24h                                Float?
  price_change_percentage_24h            Float?
  circulating_supply                     Float?
  sparkline_in_7d                        Json?
  price_change_percentage_7d_in_currency Float?
  //
  userCoins                              UserCoin[]
  airdrops                               Airdrop[]
  marketCharts                           MarketChart[]
  coinsListIDMap                         CoinsListIDMap @relation(fields: [id], references: [id], onDelete: Cascade)
  coinsListIDMapId                       String
  category                               Category?      @relation(fields: [categoryId], references: [category_id])
  categoryId                             String?
  //
  createdAt                              DateTime       @default(now())
  updatedAt                              DateTime       @updatedAt

  @@map("coin")
}

model UserCoin {
  id               String         @id @unique
  quantity         Float?
  //
  coin             Coin           @relation(fields: [coinId], references: [id], onDelete: Cascade)
  coinId           String
  coinsListIDMap   CoinsListIDMap @relation(fields: [coinsListIDMapId], references: [id], onDelete: Cascade)
  coinsListIDMapId String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  //
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([userId, coinId])
  @@map("user_coin")
}

model TrendingCoin {
  id              String   @id @default(uuid())
  coin_id         Int
  name            String
  symbol          String
  market_cap_rank Int?
  thumb           String
  slug            String
  price_btc       Float
  data            Json
  //
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([coin_id, slug])
  @@map("trending_coin")
}

model Category {
  category_id String @id @unique
  name        String
  coins       Coin[]

  @@map("category")
}

model MarketChart {
  id     String @id @unique
  prices Json
  coin   Coin   @relation(fields: [coinId], references: [id], onDelete: Cascade)
  coinId String

  @@map("market_chart")
}

model Airdrop {
  id               String         @id @default(uuid())
  project_name     String
  description      String
  status           AirdropStatus  @default(UPCOMING)
  start_date       DateTime
  end_date         DateTime
  total_prize      Float
  winner_count     Int
  link             String
  //
  coin             Coin           @relation(fields: [coinId], references: [id], onDelete: Cascade)
  coinId           String
  coinsListIDMap   CoinsListIDMap @relation(fields: [coinsListIDMapId], references: [id], onDelete: Cascade)
  coinsListIDMapId String

  @@unique([project_name, coinId])
  @@map("airdrop")
}
